import{_ as s,c as n,o as a,d as e}from"./app-CNBPQhN-.js";const i="/images/浏览器缓存机制.png",l={},p=e('<p><img src="'+i+`" alt="缓存机制"></p><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么"><span>是什么？</span></a></h2><p>Http 缓存机制适用于规定浏览器对于请求资源是否读取缓存的规则 总共分为<strong>不缓存</strong>、<strong>协商缓存</strong>、与<strong>强制缓存</strong>三种缓存机制.</p><h2 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现"><span>具体实现</span></a></h2><h3 id="不缓存" tabindex="-1"><a class="header-anchor" href="#不缓存"><span>不缓存</span></a></h3><p>设置<code>Cache-Control</code>响应头为<strong>no-store</strong>、 浏览器不再读取缓存，每一次请求都会访问服务器</p><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h3><h4 id="etag-头部字段" tabindex="-1"><a class="header-anchor" href="#etag-头部字段"><span>ETag 头部字段</span></a></h4><p><code>ETag</code> 又叫实体标签，是由服务器生成并非配给每一个资源的唯一标识。</p><ol><li>浏览器首次请求资源的时候服务器会在响应头中包含一个<code>ETag</code>。浏览器会缓存该资源和<code>ETag</code></li><li>当浏览器再一次访问该资源的时候会发送一个带有<code>If-None-Match</code>头的条件请求，其中包含先前收到的<code>ETag</code>.</li><li>服务器处理请求，检查<code>If-None-Match</code>和当前的<code>ETag</code>是否匹配 <ul><li>匹配，返回<code>304 Not Modified</code> 响应，表面资源未修改，浏览器可以使用缓存的副本。</li><li>不匹配，返回新的资源和新的<code>ETag</code>，浏览器更新缓存</li></ul></li></ol><h4 id="last-modified-头部字段" tabindex="-1"><a class="header-anchor" href="#last-modified-头部字段"><span>Last-Modified 头部字段</span></a></h4><p><code>Last-Modified</code> 头部字段指的是资源的最后修改时间。</p><ol><li>客户端在首次请求资源的时候，服务端会在响应头中包含<code>Last-Modified</code>字段，浏览器会缓存该资源和<code>Last-Modified</code>的时间。</li><li>当浏览器再次访问该资源的时候会发送一个带有<code>If-Modified-Since</code>的条件请求，其中包含了之前缓存的<code>Last-Modified</code>的时间。</li><li>服务器通过比较当前<code>Last-Modified</code>的时间是否在<code>If-Modifed-Since</code>之后： <ul><li>否，说明资源未修改，返回<code>304 Not Modified</code> 浏览器读取缓存资源</li><li>是，说明资源已经修改，返回新的资源和新的<code>Last-Modified</code>时间</li></ul></li></ol><h3 id="强制缓存" tabindex="-1"><a class="header-anchor" href="#强制缓存"><span>强制缓存</span></a></h3><h4 id="expires-头部字段" tabindex="-1"><a class="header-anchor" href="#expires-头部字段"><span>Expires 头部字段</span></a></h4><p><code>Expires</code> 头部指定资源过期的具体时间点，浏览器在该时间点之前会使用缓存，而不请求服务器。</p><h4 id="cache-control-max-age" tabindex="-1"><a class="header-anchor" href="#cache-control-max-age"><span>Cache-Control: max-age=</span></a></h4><p><code>Cache-Controll:max-age=2592000</code>，通过<code>Cache-Control</code>头部字段设置<code>max-age</code>实现强制缓存，它的单位是秒，指定资源从请求时间开始的缓存时间。</p><h2 id="实际运用场景" tabindex="-1"><a class="header-anchor" href="#实际运用场景"><span>实际运用场景</span></a></h2><p>对于 Web 项目资源来说，我们可以对应用入口的 html 文件进行协商缓存，对其他在 html 文件中引用到的资源文件进行强制缓存，只要 html 文件不变，他引用的资源就能匹配强制缓存规则，提高页面加载速度.</p><p>nginx 的具体实现：</p><div class="language-nginx line-numbers-mode" data-ext="nginx" data-title="nginx"><pre class="language-nginx"><code><span class="line"><span class="token directive"><span class="token keyword">http</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">include</span>       mime.types</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token directive"><span class="token keyword">default_type</span>  application/octet-stream</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token directive"><span class="token keyword">server</span></span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">listen</span>       <span class="token number">80</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">server_name</span>  example.com</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 启用压缩</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">gzip</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">gzip_types</span> text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 对 HTML 文件进行协商缓存</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> ~* \\.html$</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">root</span> /path/to/your/content</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">expires</span> -1</span><span class="token punctuation">;</span>  <span class="token comment"># 禁用强制缓存</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">add_header</span> Cache-Control <span class="token string">&quot;no-cache, must-revalidate&quot;</span></span><span class="token punctuation">;</span>  <span class="token comment"># 协商缓存</span></span>
<span class="line"></span>
<span class="line">            <span class="token comment"># Optional: Add ETag and Last-Modified headers</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">etag</span> <span class="token boolean">on</span></span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">if_modified_since</span> exact</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token comment"># 对其他静态资源文件进行强制缓存</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> ~* \\.(css|js|jpg|jpeg|png|gif|svg|ico|woff|woff2|ttf|eot)$</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">root</span> /path/to/your/content</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">expires</span> <span class="token number">30d</span></span><span class="token punctuation">;</span>  <span class="token comment"># 强制缓存 30 天</span></span>
<span class="line">            <span class="token directive"><span class="token keyword">add_header</span> Cache-Control <span class="token string">&quot;public, max-age=2592000&quot;</span></span><span class="token punctuation">;</span>  <span class="token comment"># 30 天（2592000 秒）</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">404</span> /404.html</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> = /40x.html</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">        <span class="token directive"><span class="token keyword">error_page</span> <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span> /50x.html</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token directive"><span class="token keyword">location</span> = /50x.html</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),c=[p];function t(o,d){return a(),n("div",null,c)}const u=s(l,[["render",t],["__file","http-cache.html.vue"]]),k=JSON.parse('{"path":"/posts/http-cache.html","title":"Http缓存机制","lang":"zh-CN","frontmatter":{"lang":"zh-CN","title":"Http缓存机制","description":"Http缓存机制","date":"2024-05-30T00:00:00.000Z","Category":["网络"],"tag":["http"]},"headers":[{"level":2,"title":"是什么？","slug":"是什么","link":"#是什么","children":[]},{"level":2,"title":"具体实现","slug":"具体实现","link":"#具体实现","children":[{"level":3,"title":"不缓存","slug":"不缓存","link":"#不缓存","children":[]},{"level":3,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]},{"level":3,"title":"强制缓存","slug":"强制缓存","link":"#强制缓存","children":[]}]},{"level":2,"title":"实际运用场景","slug":"实际运用场景","link":"#实际运用场景","children":[]}],"git":{"updatedTime":1717066165000,"contributors":[{"name":"lsh","email":"liushihuancoke@gmail.com","commits":1}]},"filePathRelative":"posts/http-cache.md","excerpt":"<p><img src=\\"/images/浏览器缓存机制.png\\" alt=\\"缓存机制\\"></p>\\n<h2>是什么？</h2>\\n<p>Http 缓存机制适用于规定浏览器对于请求资源是否读取缓存的规则\\n总共分为<strong>不缓存</strong>、<strong>协商缓存</strong>、与<strong>强制缓存</strong>三种缓存机制.</p>\\n<h2>具体实现</h2>\\n<h3>不缓存</h3>\\n<p>设置<code>Cache-Control</code>响应头为<strong>no-store</strong>、\\n浏览器不再读取缓存，每一次请求都会访问服务器</p>\\n<h3>协商缓存</h3>"}');export{u as comp,k as data};
